{# templates/manager/manager.html.twig #}

{% extends 'base.html.twig' %}

{% block stylesheets %}

<!-- Styles -->
<style>
    .contenedor-grafico {
        display: flex;
        flex-direction: column;
        margin: 6vh;
    }
    h2 {
        text-align: center;
        text-decoration: underline;
    }
    #chartdiv {
        width: 100%;
        height: 500px;
    }
</style>

{% endblock %}

{% block body %}
    {% set data = [] %}

    {% for genero in data %}
        {% set generoArray = genero|split(',') %}
        {% set dataGenero = {nombre: generoArray[0]|trim, num: generoArray[1]|trim} %}
        {% set data = data|merge([dataGenero]) %}
    {% endfor %}
    <a href="{{ path('app_logout') }}">Cerrar Sesión</a>

    <div class="contenedor-grafico">
        <h2>Géneros más frecuentes:</h2><br>    
        <div id="chartdiv"></div>
    </div>
{% endblock %}

{% block javascripts %}

<!-- Resources -->
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>

<!-- Chart code -->
<script>
am5.ready(function() {

    // Create root element
    var root = am5.Root.new("chartdiv");

    // Set themes
    root.setThemes([
        am5themes_Animated.new(root)
    ]);

    // Create chart
    var chart = root.container.children.push(am5xy.XYChart.new(root, {
        panX: true,
        panY: true,
        wheelX: "panX",
        wheelY: "zoomX",
        pinchZoomX: true,
        paddingLeft:0,
        paddingRight:1
    }));

    // Add cursor
    var cursor = chart.set("cursor", am5xy.XYCursor.new(root, {}));
    cursor.lineY.set("visible", false);

    // Create axes
    var xRenderer = am5xy.AxisRendererX.new(root, { 
        minGridDistance: 30, 
        minorGridEnabled: true
    });

    xRenderer.labels.template.setAll({
        rotation: -90,
        centerY: am5.p50,
        centerX: am5.p100,
        paddingRight: 15
    });

    xRenderer.grid.template.setAll({
        location: 1
    });

    var xAxis = chart.xAxes.push(am5xy.CategoryAxis.new(root, {
        maxDeviation: 0.3,
        categoryField: "nombre",
        renderer: xRenderer,
        tooltip: am5.Tooltip.new(root, {})
    }));

    var yRenderer = am5xy.AxisRendererY.new(root, {
        strokeOpacity: 0.1
    });

    var yAxis = chart.yAxes.push(am5xy.ValueAxis.new(root, {
        maxDeviation: 0.3,
        renderer: yRenderer
    }));

    // Create series
    var series = chart.series.push(am5xy.ColumnSeries.new(root, {
        name: "Series",
        xAxis: xAxis,
        yAxis: yAxis,
        valueYField: "num", // Usamos "num" para el valor en el eje Y
        sequencedInterpolation: true,
        categoryXField: "nombre",
        tooltip: am5.Tooltip.new(root, {
            labelText: "{valueY}"
        })
    }));

    series.columns.template.setAll({ cornerRadiusTL: 5, cornerRadiusTR: 5, strokeOpacity: 0 });
    series.columns.template.adapters.add("fill", function (fill, target) {
    return chart.get("colors").getIndex(series.columns.indexOf(target));
    });

    series.columns.template.adapters.add("stroke", function (stroke, target) {
    return chart.get("colors").getIndex(series.columns.indexOf(target));
    });

    // Set data
    var data = {{ data|json_encode()|raw }}; 

    // Ajustamos los datos para que coincidan con los campos valueYField y valueXField
    let dataFormatted = data.map(function(item) {
        return { "num": item.num, "nombre": item.nombre }; // Invertimos los campos "num" y "nombre"
    });

    //? console.log(data);

    // Asignamos los datos a los ejes X e Y y a la serie
    xAxis.data.setAll(dataFormatted);
    series.data.setAll(dataFormatted);

    // Make stuff animate on load
    series.appear(1000);
    chart.appear(1000, 100);

}); // end am5.ready()
</script>


{% endblock %}